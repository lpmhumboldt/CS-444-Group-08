#include <opencv2/opencv.hpp>
#include <opencv2/videoio.hpp>
#include <iostream>
#include <string>
#include <opencv2/calib3d.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include "stereoDepth.h"
#include <fstream>
#include "serialUtils.h"

using namespace cv;
using namespace std;

int main(int argc, char** argv) {

int fps = 10; // in frames per sec
int frameDelay = 1000/(2*fps); // in millisec 
double maxDistance = 500.0; // mm
int maxDisparity = 128;
int rows  = 480;
int cols  = 640;
Mat depthImage = Mat::zeros(rows,cols, CV_8UC1);

int rowOffset = 427;
int zones = 3;
int zoneWidth = 213;
int zoneOffset = 640;

int zoneAvgDenominator = zoneWidth * rows;

int zone1Avg = 0;
int zone2Avg = 0;
int zone3Avg = 0;

//int objectThreshold = 0;

const int cmdLength = 7;
char cmd[cmdLength];
int portID;
const char* strCmd;
const char* moveCmd;
portID = serialPortOpen();

if(portID < 0){
	printf("error opening serial port \n");
	exit(0);
}

std::vector<float> depthArray;
//Read rectification lookup tables
Mat map1x,map1y,map2x,map2y;
FileStorage fs("lookupTables.xml",FileStorage::READ);
fs["Map1x"]>>map1x;
fs["Map1y"]>>map1y;
fs["Map2x"]>>map2x;
fs["Map2y"]>>map2y;
fs.release();

if( map1x.empty()) cout << "Empty 1x lookup table"<<endl;
if( map1y.empty()) cout << "Empty 1y lookup table"<<endl;
if( map2x.empty()) cout << "Empty 2x lookup table"<<endl;
if( map2y.empty()) cout << "Empty 2y lookup table"<<endl;


// added from help 
float offset = -10.0;
float currentRow;
for(int row = 0; row < rows; row++){
 for(int col = 0; col <  cols; col++){
  currentRow = map2y.at<float>(row,col);
  if(currentRow+offset < 0 || 
   currentRow+offset>rows){
    map2y.at<float>(row,col) = currentRow;
  }else{
  map2y.at<float>(row,col) = currentRow + offset;
   }
  }
 }


// GStreamer pipeline for Jetson Nano with IMX219-83 cameras
 string left_cam_pipeline  = "nvarguscamerasrc sensor-id=0 ! video/x-raw(memory:NVMM), width=640, height=480, framerate="+to_string(fps)+
                              "/1 ! nvvidconv flip-method=rotate-180 ! video/x-raw, format=GRAY8 !  appsink drop=1";

 string right_cam_pipeline = "nvarguscamerasrc sensor-id=1 ! video/x-raw(memory:NVMM), width=640, height=480, framerate="+to_string(fps)+
                              "/1 ! nvvidconv flip-method=rotate-180 ! video/x-raw, format=GRAY8 !  appsink drop =1";
    
// Open both cameras
    VideoCapture capL(left_cam_pipeline, CAP_GSTREAMER);
    VideoCapture capR(right_cam_pipeline,CAP_GSTREAMER);


    if (!capL.isOpened() || !capR.isOpened()) {
        cerr << "Error: Could not open stereo cameras." << endl;
        return -1;
    }


    Mat leftFrame, rightFrame;

    cout << " width \n" << capL.get(CAP_PROP_FRAME_WIDTH)<<endl;
    cout << " height  \n" << capL.get(CAP_PROP_FRAME_HEIGHT)<<endl;
    cout << " format \n" << capL.get(CAP_PROP_FORMAT)<<endl;
    cout << " fps \n" << capL.get(CAP_PROP_FPS)<<endl;
    
    // Real-time loop for capturing frames
    while (true) {

        // Capture frames from both cameras
        capL >> leftFrame;
        capR >> rightFrame;

        if (leftFrame.empty() || rightFrame.empty()) {
            cerr << "Error: Empty frame detected!" << endl;
            break;
        }



      // Apply rectification
      Mat rectifiedLeft, rectifiedRight, both;
      remap(leftFrame, rectifiedLeft, map1x, map1y, INTER_LINEAR);
      remap(rightFrame, rectifiedRight, map2x, map2y, INTER_LINEAR);


      // Compute depth image using GPU
      stereoDepth(&rectifiedLeft, &rectifiedRight, &depthImage, maxDisparity, rows, cols);

      // Smooth the depth image
      Mat medianFiltered;
      medianBlur(depthImage, medianFiltered, 3);

      // display depth map
      imshow("Depth",medianFiltered);
      hconcat(rectifiedLeft, rectifiedRight,both);
      imshow("Left and Right",both);
  
      if (depthImage.isContinuous()) {
 //    	 cout << "depth array being assigned" << endl;
	 depthArray.assign(depthImage.datastart, depthImage.dataend);
 //  	 cout << "depth array has been assigned" << endl;

	 /*
	  for zone in range(zones):
		for row in range(rows):
			for zoneLoc in range(zoneWidth):
				value = zoneLoc + (zone * zoneWidth) + (zoneOffset * row)
					file.write(f"{value}\n")
	*/

	 for (int zone = 0; zone < zones; zone++) {
	 	for (int row = 0; row < rows; row++) {
			for (int rangeLoc = 0; rangeLoc < zoneWidth; rangeLoc++) {
			
				int location = rangeLoc + (zone * zoneWidth) + (zoneOffset * row);

				if (zone == 0) {
					zone1Avg = zone1Avg + depthArray[location];
				} else if (zone == 1) {
					zone2Avg = zone2Avg + depthArray[location];
				} else {
					zone3Avg = zone3Avg + depthArray[location];
				}	
			}
		}
	 }

	zone1Avg = zone1Avg / zoneAvgDenominator;
	zone2Avg = zone2Avg / zoneAvgDenominator;
	zone3Avg = zone3Avg / zoneAvgDenominator;
 
	cout << "zone1Avg is: " << zone1Avg << endl;
	cout << "zone2Avg is: " << zone2Avg << endl;
	cout << "zone3Avg is: " << zone3Avg << endl;

      } else {
	cout << "depth failed to assign" << endl;	
      }


      // pause
      //waitKey(frameDelay) ;



	bool zoneL = (zone1Avg <= zoned;
	bool zoneC = (zone2Avg <= zone1Avg && zone2Avg <= zone3Avg) && (zone2Avg > objectThreshold);
	bool zoneR = zone3Avg <= zone2Avg && zone3Avg > objectThreshold;	


//	string moveCmd, strCmd;
/*	if (zoneL && zoneC && zoneR) {
	    moveCmd = "BKW100\n";
            strCmd = "STP030\n";

	}*/
	 if(zoneC){
		moveCmd = "FWD090\n";
		strCmd = "STR090\n";
	} else {
	// if both sides are free
		if(zoneL && zoneR){
			moveCmd = "FWD080\n";
			if(zoneL < zoneR) strCmd = "STR030\n";
			else(strCmd = "STR150\n");
		}
		// leftSide is free, right is blocked
		else if(zoneL && !zoneR){
			moveCmd = "FWD080\n";
			strCmd = "STR030\n";
		}

		// rightSide is free, left is blocked
		else if(zoneR && !zoneL){
			moveCmd = "FWD080\n";
			strCmd = "STR120\n";
		}

		// both sides are blocked
		else if (zoneL && zoneC && zoneR){
			moveCmd = "BKW100\n";
			strCmd = "STP030\n";
		}
	
	//strCmd = "STR030\n";
	//moveCmd = "FWD080\n";
	serialPortWrite(moveCmd, portID);
	serialPortWrite(strCmd, portID);
	waitKey(10);	
}
}
    // Release resources
    capL.release();
    capR.release();
    destroyAllWindows();

    return 0;
}


